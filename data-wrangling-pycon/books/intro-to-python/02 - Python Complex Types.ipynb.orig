{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Python Complex Types\n",
    "\n",
    "No, I'm not referring to complex numbers, just more complex types. In this notebook we will explore:\n",
    "\n",
    "* Lists\n",
    "* Tuples\n",
    "* Dictionaries\n",
    "* Sets\n",
    "* Objects"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lists"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 50,
=======
   "execution_count": 1,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3]"
      ]
     },
<<<<<<< HEAD
     "execution_count": 50,
=======
     "execution_count": 1,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1, 2, 3]"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 51,
=======
   "execution_count": 2,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
<<<<<<< HEAD
     "execution_count": 51,
=======
     "execution_count": 2,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type([1, 2, 3])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 52,
=======
   "execution_count": 3,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
<<<<<<< HEAD
     "execution_count": 52,
=======
     "execution_count": 3,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len([1, 2, 3])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 53,
=======
   "execution_count": 6,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n",
      "[3, 2, 3, 1]\n"
     ]
    }
   ],
   "source": [
    "my_reverse_list = [1, 3, 2, 3].reverse()\n",
    "print(my_reverse_list)\n",
    "\n",
    "my_other_reverse_list = [1, 3, 2, 3][::-1]\n",
    "print(my_other_reverse_list)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 54,
=======
   "execution_count": 7,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
<<<<<<< HEAD
     "execution_count": 54,
=======
     "execution_count": 7,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_reverse_list is None"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 55,
=======
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "my_reverse_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "my_list = [1, 3, 2, 3]\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 58,
=======
   "execution_count": 9,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "my_list.reverse()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 59,
=======
   "execution_count": 10,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "[1, 3, 2, 3]"
      ]
     },
     "execution_count": 59,
=======
       "[3, 2, 3, 1]"
      ]
     },
     "execution_count": 10,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_list"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 60,
=======
   "execution_count": 12,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "my_list.sort()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 61,
=======
   "execution_count": 13,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 3]"
      ]
     },
<<<<<<< HEAD
     "execution_count": 61,
=======
     "execution_count": 13,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_list"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 62,
=======
   "execution_count": 14,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 3, 5, 7]"
      ]
     },
<<<<<<< HEAD
     "execution_count": 62,
=======
     "execution_count": 14,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted([5, 3, 2, 7])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 63,
=======
   "execution_count": 15,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
<<<<<<< HEAD
     "execution_count": 63,
=======
     "execution_count": 15,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1, 2, 3][0]"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 64,
=======
   "execution_count": 16,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
<<<<<<< HEAD
     "execution_count": 64,
=======
     "execution_count": 16,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1, 2, 3][-1]"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 65,
=======
   "execution_count": 17,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 2, 1]"
      ]
     },
<<<<<<< HEAD
     "execution_count": 65,
=======
     "execution_count": 17,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[1, 2, 3][::-1]"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 66,
=======
   "execution_count": 18,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 3]"
      ]
     },
<<<<<<< HEAD
     "execution_count": 66,
=======
     "execution_count": 18,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_list"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 67,
=======
   "execution_count": 29,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "my_list.append(['4',5])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 68,
=======
   "execution_count": 30,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "[1, 2, 3, 3, '4']"
      ]
     },
     "execution_count": 68,
=======
       "[1, 2, 3, 3, '4', 3, 6, 8, 'test', ['4', 5]]"
      ]
     },
     "execution_count": 30,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_list"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 69,
=======
   "execution_count": 21,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "my_list.extend([3, 6, 8, 'test'])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 70,
=======
   "execution_count": 22,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 3, '4', 3, 6, 8, 'test']"
      ]
     },
<<<<<<< HEAD
     "execution_count": 70,
=======
     "execution_count": 22,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_list"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 71,
=======
   "execution_count": 23,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for +: 'int' and 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-23-8554c4bb11c5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmy_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'int' and 'str'"
     ]
    }
   ],
   "source": [
    "my_list.append([3, 6, 8, 'test'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 3, '4', 3, 6, 8, 'test', [3, 6, 8, 'test']]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for +: 'int' and 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-74-8554c4bb11c5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmy_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'int' and 'str'"
     ]
    }
   ],
   "source": [
    "sum(my_list)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 75,
=======
   "execution_count": 24,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
<<<<<<< HEAD
     "execution_count": 75,
=======
     "execution_count": 24,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum([2, 5, 6, 7])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 76,
=======
   "execution_count": 25,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "42"
      ]
     },
<<<<<<< HEAD
     "execution_count": 76,
=======
     "execution_count": 25,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max([4, 7, 42])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 77,
=======
   "execution_count": 26,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-555"
      ]
     },
<<<<<<< HEAD
     "execution_count": 77,
=======
     "execution_count": 26,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min([-33, -555, 34])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 79,
=======
   "execution_count": 41,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "[1, 2, 3, 3, '4', 3, 6, 8, 'test', [3, 6, 8, 'test']]"
      ]
     },
     "execution_count": 79,
=======
       "[1, 2, 3, 3, '4', 3, 6, 8, 'test', ['4', 5]]"
      ]
     },
     "execution_count": 41,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_list"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 80,
=======
   "execution_count": 42,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<map at 0x7fbe948a81d0>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def f(x):\n",
    "    return x+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<map at 0x7f3a2450e438>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "map(lambda x: x+1, [1, 2, 3])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 81,
=======
   "execution_count": 62,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 3, 4]"
      ]
     },
<<<<<<< HEAD
     "execution_count": 81,
=======
     "execution_count": 62,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
<<<<<<< HEAD
    "[y for y in map(lambda x: x+1, [1, 2, 3])]"
=======
    "list(map(f, [1,2,3]))"
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 83,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 3]"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[y for y in map(lambda x: x+1, [1, 2, 3]) if y <4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
=======
   "execution_count": 31,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2.4, 3.5999999999999996, 4.8]"
      ]
     },
<<<<<<< HEAD
     "execution_count": 84,
=======
     "execution_count": 31,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[y*1.2 for y in map(lambda x: x+1, [1, 2, 3])]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Tuples"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 85,
=======
   "execution_count": 32,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3)"
      ]
     },
<<<<<<< HEAD
     "execution_count": 85,
=======
     "execution_count": 32,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1, 2, 3)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 86,
=======
   "execution_count": 33,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tuple"
      ]
     },
<<<<<<< HEAD
     "execution_count": 86,
=======
     "execution_count": 33,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type((1, 2, 3))"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 87,
=======
   "execution_count": 34,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'tuple' object has no attribute 'append'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
<<<<<<< HEAD
      "\u001b[0;32m<ipython-input-87-d476293ee6b3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
=======
      "\u001b[0;32m<ipython-input-34-d476293ee6b3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
      "\u001b[0;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'append'"
     ]
    }
   ],
   "source": [
    "(1, 2, 3).append((2, 1, 4))"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 88,
=======
   "execution_count": 40,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3, (5, 6), 3, 2)"
      ]
     },
<<<<<<< HEAD
     "execution_count": 88,
=======
     "execution_count": 40,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1, 2, 3, (5, 6), 3) + (2,)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 89,
=======
   "execution_count": 36,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
<<<<<<< HEAD
     "execution_count": 89,
=======
     "execution_count": 36,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1, 2, 3)[0]"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 90,
=======
   "execution_count": 37,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
<<<<<<< HEAD
     "execution_count": 90,
=======
     "execution_count": 37,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1, 2, 3)[-1]"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 91,
=======
   "execution_count": 38,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2)"
      ]
     },
<<<<<<< HEAD
     "execution_count": 91,
=======
     "execution_count": 38,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1, 2, 3)[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 2, 1)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1, 2, 3)[::-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dictionaries"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 93,
=======
   "execution_count": 76,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 3, 'a': 1, 'b': 2}"
      ]
     },
<<<<<<< HEAD
     "execution_count": 93,
=======
     "execution_count": 76,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{'a': 1, 'b': 2, 'C': 3}"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 94,
=======
   "execution_count": 78,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "my_dictionary = {'a': 1, 'b': 2, 'C': 3}"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 95,
=======
   "execution_count": 48,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
<<<<<<< HEAD
     "execution_count": 95,
=======
     "execution_count": 48,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dictionary.get('c', 1) "
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 97,
=======
   "execution_count": 80,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "3"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dictionary.get('C', 1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 3, 'a': 1, 'b': 2}"
      ]
     },
     "execution_count": 98,
=======
       "{'C': 3, 'a': 1, 'b': 2}"
      ]
     },
     "execution_count": 80,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dictionary"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 99,
=======
   "execution_count": 50,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "my_dictionary['d'] = 'test'"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 100,
=======
   "execution_count": 51,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 3, 'a': 1, 'b': 2, 'd': 'test'}"
      ]
     },
<<<<<<< HEAD
     "execution_count": 100,
=======
     "execution_count": 51,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dictionary"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 101,
=======
   "execution_count": 52,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "my_dictionary[8] = True"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 103,
=======
   "execution_count": 53,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
<<<<<<< HEAD
     "data": {
      "text/plain": [
       "{8: True, 'd': 'test', 'b': 2, 'C': 3, 'a': 1}"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
=======
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "ename": "TypeError",
     "evalue": "unhashable type: 'list'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
<<<<<<< HEAD
      "\u001b[0;32m<ipython-input-104-4a72a4375c2b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m{\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'a'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'b'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
=======
      "\u001b[0;32m<ipython-input-53-4a72a4375c2b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m{\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'a'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'b'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
      "\u001b[0;31mTypeError\u001b[0m: unhashable type: 'list'"
     ]
    }
   ],
   "source": [
    "{['a']: 1, ['b']: 2}"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 105,
=======
   "execution_count": 54,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('a',): 1, ('b',): 2}"
      ]
     },
<<<<<<< HEAD
     "execution_count": 105,
=======
     "execution_count": 54,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{('a',): 1, ('b',): 2}"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 106,
=======
   "execution_count": 55,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "dict_keys([8, 'd', 'b', 'C', 'a'])"
      ]
     },
     "execution_count": 106,
=======
       "dict_keys(['a', 'C', 'b', 'd', 8])"
      ]
     },
     "execution_count": 55,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dictionary.keys()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 107,
=======
   "execution_count": 56,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "dict_values([True, 'test', 2, 3, 1])"
      ]
     },
     "execution_count": 107,
=======
       "dict_values([1, 3, 2, 'test', True])"
      ]
     },
     "execution_count": 56,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dictionary.values()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 108,
=======
   "execution_count": 61,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "dict_items([(8, True), ('d', 'test'), ('b', 2), ('C', 3), ('a', 1)])"
      ]
     },
     "execution_count": 108,
=======
       "dict_items([('a', 1), ('C', 3), ('b', 2), ('d', 'test'), (8, True)])"
      ]
     },
     "execution_count": 61,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dictionary.items()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a': 1, 'C': 3, 'b': 2, 'd': 'test', 8: True}"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dictionary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Sets"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 109,
=======
   "execution_count": 63,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3}"
      ]
     },
<<<<<<< HEAD
     "execution_count": 109,
=======
     "execution_count": 63,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set([1, 1, 2, 2, 3, 3])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 110,
=======
   "execution_count": 64,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4}"
      ]
     },
<<<<<<< HEAD
     "execution_count": 110,
=======
     "execution_count": 64,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{2, 3, 4, 1, 3, 2, 4}"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 111,
=======
   "execution_count": 65,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'test', 5}"
      ]
     },
<<<<<<< HEAD
     "execution_count": 111,
=======
     "execution_count": 65,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{'test', 'test', 5}"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 112,
=======
   "execution_count": 66,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set"
      ]
     },
<<<<<<< HEAD
     "execution_count": 112,
=======
     "execution_count": 66,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type({2})"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 113,
=======
   "execution_count": 67,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{2, 3, 5, 6, 7}"
      ]
     },
<<<<<<< HEAD
     "execution_count": 113,
=======
     "execution_count": 67,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{2, 3, 5}.union({3, 6, 7})"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 114,
=======
   "execution_count": 68,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{2, 3}"
      ]
     },
<<<<<<< HEAD
     "execution_count": 114,
=======
     "execution_count": 68,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{2, 3, 4}.intersection({2, 3, 7})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Objects"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 115,
=======
   "execution_count": 69,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "object"
      ]
     },
<<<<<<< HEAD
     "execution_count": 115,
=======
     "execution_count": 69,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "object"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 116,
=======
   "execution_count": 70,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(int, object)"
      ]
     },
<<<<<<< HEAD
     "execution_count": 116,
=======
     "execution_count": 70,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int.__mro__"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 117,
=======
   "execution_count": 71,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(float, object)"
      ]
     },
<<<<<<< HEAD
     "execution_count": 117,
=======
     "execution_count": 71,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "float.__mro__"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 118,
=======
   "execution_count": 72,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(list, object)"
      ]
     },
<<<<<<< HEAD
     "execution_count": 118,
=======
     "execution_count": 72,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list.__mro__"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 119,
=======
   "execution_count": 74,
>>>>>>> 6630d7c99e7bc12a74729933f889541950416a62
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "float.__mro__?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#### Your Turn!\n",
    "\n",
    "* Make a list\n",
    "* Make a dictionary, and assign the list as one of the values\n",
    "* Make a tuple and assign it to another dictionary key\n",
    "* Make a set and assign it to another dictionary key\n",
    "* List all the items in your dictionary\n",
    "* Delete an item from your list using the dictionary key to access the list\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tuple.__mro__?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
